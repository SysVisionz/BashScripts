#!/bin/bash

if [[ ! -d "$HOME/.navTo" ]]; then
	mkdir $HOME/.navTo
	touch > $HOME/.navTo/directories.txt
fi

checkDir() {
	file="$HOME/.navTo/directories.txt"
	while IFS= read line
	do
		label=`echo $line | cut -d ";" -f 1`
		directory=`echo $line | cut -d ";" -f 2`
		if [[ $1 == $label ]]; then
			toNav="$directory"
			return
		fi
	done <"$file"
	toNav=false
	return
}

# function yesNo provides the user with an input where y or yes returns 1 or true.
function yesNo()
{
    read yesNoVar
    yesNoVar="${yesNoVar,}"
    if [[ $yesNoVar == 'y' || $yesNoVar == 'yes' ]]; then
        return 1
    fi
    return 0
}

removeNav() {
	file="$HOME/.navTo/directories.txt"
	newFile=''
	while IFS= read line
	do
		label=`echo $line | cut -d ";" -f 1`
		directory=`echo $line | cut -d ";" -f 2`
		if [[ $newFile == '' && $1 != $label ]]; then
			newFile="$line"
		elif [[ $1 != $label ]]; then
			newFile+="\n$line"
		else
			echo "Removed $1"
		fi
	done <"$file"
	echo -e $newFile > "$HOME/.navTo/directories.txt"
}

createCut() {
	echo "Input the directory or file name for $1."
	read -e -p "Directory: " inputDir
	if [[ "${inputDir:0:1}" == "/" || "${inputDir:0:1}" == "~" ]]; then
		if [[ -d $(eval echo $inputDir) ]]; then
	    	echo -e "$varName;$(eval echo $inputDir)" >> $HOME/.navTo/directories.txt
	    fi
	elif [[ "${inputDir:0:3}" == "../" ]]; then
		curDir="$PWD"
		while [ "${inputDir:0:3}" == "../" ]
		do
			curDir="$(dirname "$curDir")"
			inputDir="${inputDir:3}"
		done
		inputDir="$curDir/$inputDir"
		if [[ -d $(eval echo $inputDir) ]]; then
			echo -e "$varName;$(eval echo $inputDir)" >> $HOME/.navTo/directories.txt
		fi
	else
		if [[ "${inputDir:0:2}" == "./" ]]; then
			inputDir="${inputDir:2}"
		fi
		inputDir="$PWD/$inputDir"
		if [[ -d $(eval echo $inputDir) ]]; then
			echo -e "$varName;$(eval echo $inputDir)" >> $HOME/.navTo/directories.txt
		fi
	fi
}

editNav() {
	echo "This shortcut has already been set to $1."
	echo "Overwrite current shortcut?"
	yesNo
	if [[ $? == 1 ]]; then
		removeNav $varName
		createCut $varName
	fi
}

if [[ $1 == "create" ]]; then
	if [[ $2 == '' ]]; then
		echo "What would you like the link name to be?"
		read -p "Name: " varName
		checkDir $varName
		if [[ $toNav != false ]]; then
			editNav $varName
			exit
		fi
	else
		varName=$2
		checkDir $varName
		if [[ $toNav != false ]]; then
			editNav $varName
			exit
		fi
	fi
	createCut $varName
elif [[ $1 == "list" ]]; then
	file="$HOME/.navTo/directories.txt"
	while IFS= read line
	do
		label=`echo $line | cut -d ";" -f 1`
		directory=`echo $line | cut -d ";" -f 2`
		echo -e "$label : $directory"
	done <"$file"
elif [[ $1 == "remove" ]]; then
	checkDir $2
	if [[ $toNav != false ]]; then
		removeNav $2
		exit
	fi
elif [[ $1 == "open" ]]; then
	checkDir $2
	if [[ $toNav != false ]]; then
		cd "$toNav"
		if [[ $3 ]]; then
			xdg-open $3
		else
			xdg-open ./
		fi
	fi
elif [[ $1 == "help" ]]; then
	echo "format goes navTo [command] [shortcut name] [subdirectory of shortcut]"
	echo "list: shows the current shortcuts you've set up."
	echo "open: opens the directory shortcut in question."
	echo "create: creates new shortcut. May optionally be followed by the desired shortcut name, or this will be defined in the creation process."
	echo "You may precede navTo with a . and simply type in the name of the shortcut to navigate to it within terminal."
	echo "format: '. navTo [shortcut name]'"
else
	checkDir $1
	if [[ $toNav != false ]]; then
		cd "$toNav"
		if [[ ! $2 == '' ]]; then
			cd $2
		fi
	else
		echo "not a valid file or directory. Use navTo help for more information."
	fi
fi