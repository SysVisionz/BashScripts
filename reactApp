#!/bin/bash

appDir="$HOME/.reactApp"
commonDir="$appDir/common"
categoryDir="$appDir/categories"

# function checkCategory allows you to check categories.tmp to see if the specified category exists already.
function checkCategory()
{
    file="$appDir/categories.tmp"
    while IFS= read line; do
        if [[ "$1{" == $line ]]; then
            return 1
        fi
    done <"$file"
    return 0
}

# function copier takes $1 file or directory and copies it to storage, adding it to $2 category
function copier()
{
    nameOf=`basename $1`
    for i in $( ls $commonDir); do
        if [[ "$i" == $nameOf ]]; then
            if [[ -d $1 ]]; then
                echo "Directory $element is already part of your common storage."
                echo "Overwrite the directory currently in your common storage?"
            elif [[ -f $1 ]]; then
                echo "File $element is already part of your common storage."
                echo "Overwrite the file currently in your common storage?"
            fi
            yesNo
            if [[ $? == 0 ]]; then
                noCopyFile=true
            fi
            break
        fi
    done
    # if the file has no conflicts or if the user has decided to overwrite the original, copy the file or directory.
    if [[ ! $noCopyFile ]]; then
        if [[ -f "$1" ]]; then
            cp "$1" "$commonDir"
        elif [[ -d $1 ]]; then
            cp -r "$1/" "$commonDir"
        fi
    fi
    # if a category was declared, add this file or directory to that category.
    if [[ $2 ]]; then
        addToCategory $nameOf $2
    fi
}

# addItem checks if the $1 target being added to the common file is a directory, then allows the user to decide if they want to add it as a directory or add all files within the directory individually.
# it also adds the item to the $2 category, if one is chosen.
function addItem()
{
    if [[ -f $1 ]]; then
        copier $1 $2
    elif [[ -d $1 ]]; then
        echo "Would you like to add files from this directory individually, rather than as a directory?"
        yesNo
        if [[ $? == 1 ]]; then
            for element in $( ls $1); do
                copier $1/$element $2
            done
        else
            copier $1 $2
        fi
    else
        echo "Not a valid file or directory."
    fi
}

# function yesNo provides the user with an input where y or yes returns 1 or true.
function yesNo()
{
    read yesNoVar
    yesNoVar="${yesNoVar,}"
    if [[ $yesNoVar == 'y' || $yesNoVar == 'yes' ]]; then
        return 1
    fi
    return 0
}

# checkInCategory searches within a category's data to see if the specified file or directory already exists within that category.
function checkInCategory()
{
    file="$appDir/categories.tmp"
    while IFS= read line; do
        if [[ "$2{" == "$line" ]]; then
            active=true
        fi
        if [[ $active ]]; then
            if [[ "$1" == "$line" ]]; then
                return 1
            fi
            if [[ "}" == "$line" ]]; then
                break
            fi
        fi
    done <"$file"
    return 0
}

function checkShortcut()
{
    file="$appDir/shortcuts.tmp"
    while IFS= read line; do
        name="${line%=*}"
        if [[ "$name" != '' && "$name" == "$1" ]]; then
            length=${#name}+1
            target="${line:$length}"
            return 1
        fi
    done <"$file"
    return 0
}

function makeShortcut()
{
    touch "$appDir/tempshort"
    if [[ -f "$appDir/shortcuts.tmp" ]]; then
        file="$appDir/shortcuts.tmp"
        while IFS= read line; do
            name="${line%=*}"
            if [[ "$name" == "$1" ]]; then
                found=true
                echo "revising shortcut with name $1 to target $2"
                echo "$1=$2">>"$appDir/tempshort"
            else
                echo "$line">>"$appDir/tempshort"
            fi
        done <"$file"
        if [[ ! $found ]]; then
            echo "Making new shortcut to $2 with name $1"
            echo "$1=$2">>"$appDir/tempshort"
        fi
         mv "$appDir/tempshort" "$appDir/shortcuts.tmp"
         echo "Added shortcut successfully!"
    else
        echo "$1=$2">"$appDir/shortcuts.tmp"
         echo "Added shortcut successfully!"
    fi
}

# inArray searches an array to see if a particular variable exists within that array.
function inArray()
{
    for i in $2; do
        if [[ "$i" == $1 ]]; then
            return 1
        fi
    done
    return 0
}

# editCategory allows the user to add or remove elements to a category, or create a new category altogether.
function editCategory()
{
    listedCategories=()
    file="$appDir/categories.tmp"
    while IFS= read line; do
        if [[ "${line: -1}" == "{" ]]; then
            listedCategories+=("${line:0:-1}")
        fi
    done <"$file"
    while true; do
        echo "Which file or directory do you wish to add to or remove from this category?"
        echo "Current files and directories in common storage (files or directories already in this category are marked with a *)"
        echo 'enter "quit" when finished'
        array=()
        for i in $( ls "$commonDir"); do
            checkInCategory "$i" "$1"
            if [[ $? == 1 ]]; then
                echo "*" "$i"
                array+=("$i")
            else
                echo "$i"
            fi
        done
        read -p "file or directory to add or remove: " element
        if [[ -f "$commonDir/$element" || -d "$commonDir/$element" ]]; then
            checkInCategory "$element" "$1"
            if [[ $? == 1 ]]; then
                echo "This file or directory is already in this category. Remove from category?"
                yesNo
                if [[ $? == 1 ]]; then
                    count=0
                    removeFromCategory "$element" "$category"
                fi
            elif [[ $element == "quit" ]]; then
                break
            else
                addToCategory "$element" "$1"
            fi
        else
            echo "Not an existing file or directory."
        fi
    done
}

# changeDirectory allows the user to change their directory in which their applications are placed.
function changeDirectory()
{
    echo "Please enter your React Application directory"
    read -e -p "Directory:" inputDir
    inputDir="$(eval echo "$inputDir")"
    if [ -d "$inputDir" ]; then
        reactDir="$inputDir"
    else
        echo "This directory does not exist. Create this directory? [y/n]"
        yesNo
        if [[ $? == 1 ]]; then
            mkdir "$inputDir"
            reactDir="$inputDir"
        else
            echo "exiting"
            exit
        fi
    fi
    echo "$reactDir" > "$appDir/reactDir.tmp"
}
function changeWPDirectory()
{
    echo "Please enter your Wordpress Project directory"
    read -e -p "Directory:" inputDir
    inputDir=$(eval echo $inputDir)
    if [ -d "$inputDir" ]; then
        wpDir="$inputDir"
    else
        echo "This directory does not exist. Create this directory? [y/n]"
        yesNo
        if [[ $? == 1 ]]; then
            mkdir $inputDir
            wpDir="$inputDir"
        else
            echo "exiting"
            exit
        fi
    fi
    echo "$wpDir" > "$appDir/wpDir.tmp"
}
# makes base directories for application data.
if [[ ! -d "$appDir" ]]; then
    mkdir "$appDir"
fi
if [[ ! -d "$commonDir" ]]; then
    mkdir "$commonDir"
fi
# pulls directory for react applications from application data or allows user to set that directory.
if [[ -f "$appDir/reactDir.tmp" ]]; then
    reactDir=$(<$appDir/reactDir.tmp)
else
    changeDirectory
fi
if [[ -f "$appDir/wpDir.tmp" ]]; then
    wpDir=$(<$appDir/wpDir.tmp)
fi
if [[ -f "$appDir/categories.tmp" ]]; then
    file="$appDir/categories.tmp"
    while IFS= read line; do
        categories+=($line)
    done <"$file"
fi

function checkCommand()
{
    if [[ -d "$reactDir/$1" || $command ]]; then
        target="$1"
    else
        checkShortcut "$1"
        if [[ $? == 0 ]]; then
            command="$1"
        fi
    fi
}

function addToCategory()
{
    touch tempcat
    file="$appDir/categories.tmp";
    while IFS= read line; do
        name="${line%=*}"
        if [[ "$2{" == "$line" ]]; then
            echo "$line">>"$appDir/tempcat"
            echo "$1=$2">>"$appDir/tempcat"
        else
            echo "$line">>"$appDir/tempcat"
        fi
    done <"$file"
    mv "$appDir/tempcat" "$appDir/categories.tmp"
}

function removeFromCategory()
{
    touch tempcat
    file="$appDir/categories.tmp";
    while IFS= read line; do
        name="${line%=*}"
        if [[ "$2{" == "$line" ]]; then
            active=true;
        fi
        if [[ $active ]]; then
            if [[ "$line" != "$1" ]]; then
                echo "$line">>"$appDir/tempcat"
            fi
        else
            echo "$line">>"$appDir/tempcat"
        fi
    done <"$file"
    mv "$appDir/tempcat" "$appDir/categories.tmp"
}

for i in "$@"; do
    case "$i" in
        --wp ) wp=true;;
        --basic ) basic=true;;
        --server ) server=true;;
        --no-redux ) no_redux=true;;
        --socket ) socket=true;;
        --silent ) silent=true;;
        --ajax ) ajax=true;;
        --add ) add=true;;
        --get ) get=true;;
        --edit ) edit=true;;
        -s=* ) shortcut="${i:3}";;
        -c=* ) category="${i:3}";;
        * ) checkCommand "$i";;
    esac
done
# create command creates a new react react app with the given name.
if [[ "$command" == "create" ]]; then
    cd "$reactDir"
    create-react-app "$target"
    mkdir "$reactDir/$target/src/components"
    cd "$target"
    if [[ !$basic ]]; then
        npm i --save react-router-dom && npm i --save react-transition-group && npm i --save-dev prop-types && npm i --save validator && npm i --save-dev eslint
    fi
    if [[ $ajax ]]; then
        npm i --save request-promise
    fi
    if [[ $socket ]]; then
         npm i --save socket.io-client
    fi
    if [[ ! $no_redux && ! $basic ]]; then
        cd src
        echo "import React from 'react';
import ReactDOM from 'react-dom';
import {Provider} from 'react-redux';
import ReduxThunk from 'redux-thunk';
import {createStore, applyMiddleware} from 'redux';
import combineReducers from './reducers';
import App from './App';
import * as serviceWorker from './serviceWorker';

ReactDOM.render((<Provider store={createStore(combineReducers, {}, applyMiddleware(ReduxThunk)) }>
                <App />
        </Provider>), document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: http://bit.ly/CRA-PWA
serviceWorker.unregister();" > index.js;
        mkdir reducers
        mkdir actions
        cd reducers
        echo "import { combineReducers } from 'redux';
import reduxReducer from './reduxReducer';


export default combineReducers({
    reducer: reduxReducer
});" > index.js
        echo "const INITIAL_STATE = {

}

export default (state=INITIAL_STATE, action) => {
    const {type, payload} = action;
    switch (type) {
        case 'update':
            return {...state, ...payload};
        default:
            return {...state};
    }
}" > reduxReducer.js
        cd ../actions
        if [[ $wp ]] && [[ $ajax || $socket ]]; then
            special="
const postURI = config => {
    const {nonce, ajax_url} = window.ajaxValues;
    return ajax_url + \"?action=YOUR_WP_ACTION&nonce=\" + nonce;
}
const getURI = config => {
    const {nonce, ajax_url} = window.ajaxValues;
    let retval = ajax_url + \"?action=YOUR_WP_ACTION\";
    config = {nonce, ...config}
    for (const i in config) {
        retval+= \"&\" + i + \"=\" + config[i];
    }
    return retval;
}
"
            url="url: getURI({
                type: 'get_settings'
            })"
        else
            special=""
            url="url: window.location.origin"
        fi
        if [[ $socket ]]; then
            echo "import request from 'request-promise'
import socketIOClient from 'socket.io-client';
$special
export const update = data => {
    return {
        type: 'update', 
        payload: data
    }
}

export const requestTemplate = () => {
    return dispatch => {
        request({
            method: ,
            $url,
            json: ,
            headers: {
            },
            body: {
            }
        }).then(res => {
            dispatch({
                type: '',
                payload: 
            });
        }).catch(err => {
            dispatch({
                type: '',
                payload: 
            });
        });
    }
}

export const socketTemplate = ( socket) => {
    return dispatch => {
        request({
            method: '',
            $url,
            json: ,
            headers: {
            },
            resolveWithFullResponse: 
        })
        .then( res => {
            socket.emit('', {})
            dispatch({type: '', payload: )
        })
        .catch( err => dispatch( {type: '', payload: } ) )

    }
}" > templateActions.js
            echo "export * from './socketRequestTemplateActions';" > index.js
        elif [[ $ajax ]]; then
            echo "import request from 'request-promise'
$special
export const update = data => {
    return {
        type: 'update',
        payload: data
    }
}

export const requestTemplate = () => {
    return dispatch => {
        request({
            method: ,
            $url,
            json: ,
            headers: {
            },
            body: {
            }
        }).then(res => {
            dispatch({
                type: '',
                payload: 
            });
        }).catch(err => {
            dispatch({
                type: '',
                payload: 
            });
        });
    }
}" > templateActions.js
            echo "export * from './requestTemplateActions';" > index.js
        else
            echo "export const update = data => {
    return {
        type: 'update',
        payload: data
    }
}" > templateActions.js
            echo "export * from './templateActions';" > index.js
        fi
        cd ../../
        npm i --save redux &&  npm i --save react-redux && npm i --save redux-thunk
        if [[ ! $silent ]]; then
            paplay "$HOME/Music/system-ready.ogg"
        fi
        read -p "Plugin Base Directory: " plugin
        read -p "subdirectory, if any: " subdir
        read -p "Nonce value prefix: " nonce_prefix
        if [[ $ajax || $socket ]]; then
            echo "has_requests=true" > for-wp
        fi
        echo "plugin_name=\"$plugin\"
plugin_subdirectory=\"$subdir\"
nonce_prefix=\"$nonce_prefix\"" >> for-wp
    fi
    if [[ $wp ]]; then
        cd ./public
        rm favicon.ico
        rm manifest.json
        echo "<!DOCTYPE html>
<html lang=\"en\">
  <body>
    <noscript>
      You need to enable JavaScript to run this app.
    </noscript>
    <div id=\"root\"></div>
  </body>
</html>" > index.html
    elif [[ $server ]]; then
        npm i --save mongodb && npm i --save mongoose
        if [[ $socket ]]; then
            npm i --save socket.io
        fi
        if [[ ! $silent ]]; then
            paplay $HOME/Music/system-ready.ogg
        fi
    else
        if [[ ! $silent ]]; then
            paplay $HOME/Music/system-ready.ogg
        fi
    fi
# reset will reset the node modules and reinstall them.
elif [[ "$command" == "reset" ]]; then
        cd "$reactDir/$target"
        rm -rf node_modules
        npm install
elif [[ "$command" == "build" ]]; then
    if [[ -d "$reactDir/$target" ]]; then
        cd "$reactDir/$target"
        npm run build
        if [[ ! $silent ]]; then
            paplay "$HOME/Music/system-ready.ogg"
        fi
        if [[ -f ./for-wp ]]; then
            if [[ ! $wpDir ]]; then
                echo "No directory location for wordpress Projects.
Would you like to set a directory for
your wordpress projects?"
                yesNo
                if [[ $? == 1 ]]; then
                    changeWPDirectory
                else
                    echo "exiting..."
                    exit
                fi
            fi
            file="$reactDir/$target/for-wp"
            while IFS= read line; do
                case "$line" in
                    plugin_name=* ) plugin_name="${line:13:-1}";;
                    plugin_subdirectory=* ) plugin_subdirectory="${line:21:-1}";;
                    has_requests=* ) has_requests="${line:13}";;
                    * ) break
                esac
            done <"$file"
            project_directory="$wpDir/$plugin_name"
            if [[ "$plugin_subdirectory" != '' ]]; then
                full_directory="$project_directory/$plugin_subdirectory";
            else
                full_directory="$project_directory"
            fi
            if [[ $has_requests ]]; then
                dirCode="<script>window.ajaxValues = {
        ajax_url: '<?php echo admin_url( 'admin-ajax.php' )?>',
        nonce: '<?php echo wp_create_nonce( "$nonce_prefix" ) ?>',
        directory: '<?php plugins_url() . '/$plugin_name$plugin_subdirectory' ?>'
    }</script>
    "
            else
                dirCode=""
            fi
            cd build
            dirCode="$dirCode<?php \$directory = plugins_url() . '/$plugin_name$plugin_subdirectory' ?>"
            mv index.html index.html.php
            echo "$dirCode
            $(cat index.html.php)" > index.html.php
            sed 's/\/static/<?php echo $directory ?>\/static/g' <index.html.php > temp
            mv temp index.html.php
            if [[ ! -d "$project_directory" ]]; then
                echo "It looks like that project doesn't exist 
within your wordpress projects directory.
Would you like to create the project now?"
                yesNo
                if [[ $? == 1 ]]; then
                    mkdir "$project_directory"
                    if [[ ! "$plugin_subdirectory" == '' ]]; then
                        mkdir "$full_directory"
                    fi
                else
                    echo "exiting..."
                    exit
                fi
            fi
            if [[ ! -d "$full_directory" ]]; then
                sub_name="${full_directory/*\/}"
                echo "It looks like the subdirectory $sub_name 
doesn't exist within this wordpress project 
directory.
Would you like to create the subdirectory now?"
                yesNo
                if [[ $? == 1 ]]; then
                    if [[ ! "$plugin_subdirectory" == '' ]]; then
                        mkdir "$full_directory"
                    fi
                else
                    echo "exiting..."
                    exit
                fi
            fi
            if [[ -d "$full_directory" ]]; then
                file_name="$(find $full_directory -maxdepth 1 -name precache*)"
                if [[ ! "$file_name" == '' || -d "$full_directory/static" ]]; then
                    echo "WARNING: this will fully replace 
the react build files within 
$full_directory
Continue?"
                    yesNo
                    if [[ $? == 1 ]]; then
                        if [[ ! "$file_name" == '' ]]; then
                            rm "$file_name"
                        fi
                        if [[ -d "$full_directory/static" ]]; then
                            rm -r "$full_directory/static"
                        fi
                        cp -r "$reactDir/$target/build/"* "$full_directory"
                    else
                        echo "exiting..."
                        exit
                    fi
                else
                    cp -r "$reactDir/$target/build/"* "$full_directory"
                fi
            fi
            if [[ -f "$wpDir/$plugin_name.zip" ]]; then
                echo "Replace $wpDir/$plugin_name.zip?"
                yesNo
                if [[ $? == 1 ]]; then
                    zip -r -q "$wpDir/$plugin_name.zip" "$wpDir/$plugin_name" && echo "successfully created project zip file" || echo "failed to create project zip file"
                fi
            else 
                zip -r -q "$wpDir/$plugin_name.zip" "$wpDir/$plugin_name" && echo "successfully created project zip file" || echo "failed to create project zip file"
            fi
        fi
    else
        echo "not an existing project."
    fi
# common commands pull to or from a central common file directory in reactApp folder.
elif [[ "$command" == "common" ]]; then
    # common get command retrieves the common files within a particular category or all common files.
    if [[ $get ]]; then
        # if a category is specified with the get command, retrieve the files within the given category.
        if [[ $category != '' ]]; then
            if [[ $? == 1 ]]; then
                file="$categoryDir/$category.tmp"
                while IFS= read line; do
                    cp "$commonDir/$line" "$reactDir/$target/src/components/common/"
                done <"$file"
            fi
        # if a category is not specified with the get command, verify if the user meant to specify the category, or wants to pull all existing common files.
        else
            echo "Would you like to add all common files in all categories to the target project? (Y/n)"
            yesNo
            if [[ $? == 1 ]]; then
                cp "$commonDir/." "$reactDir/$target/src/components/common/"
            else
                echo "What category would you like to pull from?"
                while true; do
                    echo "Existing categories:"
                    echo "${categories[*]}"
                    read -p "Category: " category
                    checkCategory "$category"
                    if [[ $? == 0 ]]; then
                        echo "Not a valid category."
                    else
                        file="$categoryDir/$category.tmp"
                        while IFS= read line; do
                            cp "$commonDir/$line $reactDir/$target/src/components/common/"
                        done <"$file"
                        break;
                    fi
                done
            fi
        fi
    # common edit allows you to edit the current common file categories.
    elif [[ $edit ]]; then
        # if the category isn't specified, ask user to specify category.
        if [[ $category == '' ]]; then
            echo "What category would you like to edit?"
            echo "Categories: ${categories[*]}"
            read -p "Category: " category
        fi
        # if the category doesn't exist, see if the user would like to create this category.
        checkCategory "$category"
        if [[ $? == 0 ]]; then
            echo "Not an existing category."
            echo "Create this category?"
            yesNo
            if [[ $? == 1 ]]; then
                editCategory "$category"
            fi
        # if the category does exist, check if the user would like to delete it, then allow them to edit it.
        else
            echo "Would you like to delete this category?"
            yesNo
            if [[ $? == 1 ]]; then
                array=( "${categories[@]}" )
                count=0
                for i in ${array[@]}; do
                    if [[ "$i" == "$category" ]]; then
                        echo "deleting $i"
                        unset array[$count]
                        break
                    fi
                    let count++
                done
                arrayToFile "$appDir/categories.tmp"
            else
                editCategory "$category"
            fi
        fi
    elif [[ $add ]]; then
        echo "Add this directory or file to specific category? (Y/n)"
        yesNo
        if [[ $? == 1 ]]; then
            while true; do
                echo "Existing categories:"
                echo "${categories[*]}"
                read -p "Category: " category
                checkCategory "$category"
                if [[ $? == 0 ]]; then
                    echo "Create $category category?"
                    yesNo
                    if [[ $? == 1 ]]; then
                        echo "$category" >>  "$appDir/categories.tmp"
                        break
                    else
                        echo "Proceed with no category?"
                        yesNo
                        if [[ $? == 1 ]]; then
                            categoryNotUsed=true
                            break
                        fi
                    fi
                fi
            done
        else
            categoryNotUsed=true
        fi
        cd "$reactDir"
        if [[ $categoryNotUsed ]]; then
            echo "What file or directory would you like to add to common files?"
            read -e -p "$reactDir" fileOrDirectory
            addItem $fileOrDirectory
        else
            echo "What file or directory would you like to add to common files under the $category category?"
            read -e -p "$reactDir" fileOrDirectory
            addItem "$fileOrDirectory" "$category"
        fi
    fi
# list will list the app directories in the main react app directory.
elif [[ "$command" == "list" ]]; then
    ls $reactDir
    file="$appDir/shortcuts.tmp"
    echo "assigned shortcuts:"
    while IFS= read line; do
        echo "$line"
    done <"$file"
elif [[ "$command" == "changeDir" ]]; then
    if [[ $wp ]]; then
        changeWPDirectory
    else
        changeDirectory
    fi
elif [[ "$command" == "curDir" ]]; then
    echo "$reactDir"
elif [[ "$command" == "open" ]]; then
    xdg-open "$reactDir/$target"
elif [[ "$command" == "shortcut" && -d "$reactDir/$target" ]]; then
    makeShortcut "$shortcut" "$target"
elif [[ $target && -d "$reactDir/$target" ]]; then
    cd "$reactDir/$target"
    npm start
elif [[ "$command" == "help" ]]; then
    echo "current reactApp Directory: $reactDir
[app]: runs [app].
shortcut [shortcut target] -s=[shortcut name]: makes the used name
    into a shortcut to the specified target application.
    shortcuts can then be used to target that file.
create [app]: creates a React application [app] 
    inside the reactApp directory. Plays indicator noise 
    at completion of task.
        NOTE: create automatically installs 
            react-transition-group, react-router-dom, 
            prop-types, validator, eslint, redux, 
            react-redux, and redux-thunk. Additionally, 
            typical redux actions and reducers templates 
            will also be set up.
        --basic prevents all automatic repository 
            installation
        --wp creates the application and 
            sets it to build for insertion into 
            wordpress plugins.
        --socket includes socket.io-client for 
            websocketing, and modifies the actions file 
            accordingly.
        --ajax includes request-promise for ajax 
            requests, and modifies the actions file 
            accordingly. Redundant if --socket is used.
        --server includes mongodb and mongoose, includes 
            socket.io if --socket was used.
        --no-redux prevents automatic installation of 
            redux, react-redux, and redux-thunk. 
            Redundant if --basic is used.
        --silent prevents indicator sound playing at completion
open [app]: opens the root directory of the specified application.
build [app]: builds the application. If this was created 
    with the --wp setting, it builds for insertion into a wordpress 
    plugin. Plays indicator noise at completion of task.
    NOTE: as of this time, media files will not function properly
    within a build. They must be included within the WP plugin
    and have their locations retrieved via ajax request.
        --silent prevents indicator sound playing at completion
list: lists applications in reactApp directory, and current shortcuts.
reset [app]: clears and reinstalls node repositories within [app].
common: allows for copying of common files to a central directory ()
     --add ) saves a file or directory to your common files store, allowing you to add a category to it.
     --get ) copies common files to the target app. 
     If no category is given, all existing common files are copied. 
     --edit allows you to edit a category by adding 
        or removing files currently in your common storage to a 
        category.
     -c=[category] sets the category being used.
     list: lists apps within reactApp directory.
changeDir: changes reactApp directory. if used with --wp, changes the wordpress project directory instead."
else
    echo "Unknown command or $reactDir does not exist. User \"reactApp create $command\" to create this app."
fi
